
.. _program_listing_file_src_friction_friction.hpp:

Program Listing for File friction.hpp
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_friction_friction.hpp>` (``src/friction/friction.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <Eigen/Core>
   #include <Eigen/Sparse>
   
   #include <ipc/collision_constraint.hpp>
   #include <ipc/friction/friction_constraint.hpp>
   #include <ipc/utils/eigen_ext.hpp>
   
   namespace ipc {
   
   void construct_friction_constraint_set(
       const Eigen::MatrixXd& V,
       const Eigen::MatrixXi& E,
       const Eigen::MatrixXi& F,
       const Constraints& contact_constraint_set,
       double dhat,
       double barrier_stiffness,
       double mu,
       FrictionConstraints& friction_constraint_set);
   
   void construct_friction_constraint_set(
       const Eigen::MatrixXd& V,
       const Eigen::MatrixXi& E,
       const Eigen::MatrixXi& F,
       const Constraints& contact_constraint_set,
       double dhat,
       double barrier_stiffness,
       const Eigen::VectorXd& mus,
       FrictionConstraints& friction_constraint_set);
   
   void construct_friction_constraint_set(
       const Eigen::MatrixXd& V,
       const Eigen::MatrixXi& E,
       const Eigen::MatrixXi& F,
       const Constraints& contact_constraint_set,
       double dhat,
       double barrier_stiffness,
       const Eigen::VectorXd& mus,
       const std::function<double(double, double)>& blend_mu,
       FrictionConstraints& friction_constraint_set);
   
   template <typename T>
   T compute_friction_potential(
       const Eigen::MatrixXd& V0,
       const Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>& V1,
       const Eigen::MatrixXi& E,
       const Eigen::MatrixXi& F,
       const FrictionConstraints& friction_constraint_set,
       double epsv_times_h);
   
   Eigen::VectorXd compute_friction_potential_gradient(
       const Eigen::MatrixXd& V0,
       const Eigen::MatrixXd& V1,
       const Eigen::MatrixXi& E,
       const Eigen::MatrixXi& F,
       const FrictionConstraints& friction_constraint_set,
       double epsv_times_h);
   
   Eigen::SparseMatrix<double> compute_friction_potential_hessian(
       const Eigen::MatrixXd& V0,
       const Eigen::MatrixXd& V1,
       const Eigen::MatrixXi& E,
       const Eigen::MatrixXi& F,
       const FrictionConstraints& friction_constraint_set,
       double epsv_times_h,
       bool project_hessian_to_psd = true);
   
   } // namespace ipc
   
   #include "friction.tpp"
