
.. _program_listing_file_src_barrier_barrier.cpp:

Program Listing for File barrier.cpp
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_barrier_barrier.cpp>` (``src/barrier/barrier.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Barrier functions that grow to infinity as x -> 0+. Includes gradient and
   // hessian functions, too. These barrier functions can be used to impose
   // inequlity constraints on a function.
   #include <ipc/barrier/barrier.hpp>
   
   namespace ipc {
   
   double barrier_gradient(double d, double dhat)
   {
       if (d <= 0.0 || d >= dhat) {
           return 0.0;
       }
       // b(d) = -(d - d̂)²ln(d / d̂)
       // b'(d) = -2(d - d̂)ln(d / d̂) - (d-d̂)²(1 / d)
       //       = (d - d̂) * (-2ln(d/d̂) - (d - d̂) / d)
       //       = (d̂ - d) * (2ln(d/d̂) - d̂/d + 1)
       return (dhat - d) * (2 * log(d / dhat) - dhat / d + 1);
   }
   
   double barrier_hessian(double d, double dhat)
   {
       if (d <= 0.0 || d >= dhat) {
           return 0.0;
       }
   
       double dhat_d = dhat / d;
   
       return (dhat_d + 2) * dhat_d - 2 * log(d / dhat) - 3;
   }
   
   } // namespace ipc
