
.. _program_listing_file_src_implicits_plane.hpp:

Program Listing for File plane.hpp
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_implicits_plane.hpp>` (``src/implicits/plane.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <vector>
   
   #include <Eigen/Core>
   
   #include <ipc/collision_constraint.hpp>
   
   namespace ipc {
   
   void construct_point_plane_constraint_set(
       const Eigen::MatrixXd& V,
       const Eigen::MatrixXd& plane_origins,
       const Eigen::MatrixXd& plane_normals,
       const double dhat,
       std::vector<PlaneVertexConstraint>& pv_constraints,
       const double dmin = 0,
       const std::function<bool(size_t, size_t)>& can_collide =
           [](size_t, size_t) { return true; });
   
   // Collision detection
   
   bool is_step_point_plane_collision_free(
       const Eigen::MatrixXd& V0,
       const Eigen::MatrixXd& V1,
       const Eigen::MatrixXd& plane_origins,
       const Eigen::MatrixXd& plane_normals,
       const std::function<bool(size_t, size_t)>& can_collide =
           [](size_t, size_t) { return true; });
   
   bool compute_point_plane_collision_free_stepsize(
       const Eigen::MatrixXd& V0,
       const Eigen::MatrixXd& V1,
       const Eigen::MatrixXd& plane_origins,
       const Eigen::MatrixXd& plane_normals,
       const std::function<bool(size_t, size_t)>& can_collide =
           [](size_t, size_t) { return true; });
   
   } // namespace ipc
